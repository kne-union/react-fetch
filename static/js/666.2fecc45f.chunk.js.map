{"version":3,"file":"static/js/666.2fecc45f.chunk.js","mappings":"gMAGA,MAk4BA,EAl4BqB,CACjBA,KAAM,cACNC,QAAS,6gCAiBTC,YAAa,8DACbC,YAAa,mBACbC,IAAK,+3XA6ULC,QAAS,CACLC,QAAQ,EACRC,UAAW,oBACXC,MAAO,8MAUPC,KAAM,CAAC,CACXC,MAAO,qBACPR,YAAa,quCAKbS,KAAM,i2FAkFNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,+BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,GACb,CACEb,KAAM,IACNG,YAAa,SACbU,UAAW,KAEb,CACEH,MAAO,2BACPR,YAAa,uIACbS,KAAM,uUAgBNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,+BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,KAEb,CACEH,MAAO,wDACPR,YAAa,oKACbS,KAAM,ofAoBNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,+BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,KAEb,CACEH,MAAO,2BACPR,YAAa,yJACbS,KAAM,wMAWNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,+BACbU,UAAW,KAEb,CACEH,MAAO,uCACPR,YAAa,uCACbS,KAAM,0tCAuCNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,+BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,GACb,CACEb,KAAM,IACNG,YAAa,SACbU,UAAW,KAEb,CACEH,MAAO,uCACPR,YAAa,mDACbS,KAAM,g+FA4ENC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,+BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,GACb,CACEb,KAAM,IACNG,YAAa,SACbU,UAAW,KAEb,CACEH,MAAO,qBACPR,YAAa,4EACbS,KAAM,iWAiBNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,+BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,KAEb,CACEH,MAAO,uCACPR,YAAa,iFACbS,KAAM,8eAmBNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,+BACbU,UAAW,KAEb,CACEH,MAAO,YACPR,YAAa,kDACbS,KAAM,unBA0BNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,+BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,KAEb,CACEH,MAAO,2BACPR,YAAa,uCACbS,KAAM,g3BAoCNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,+BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,KAEb,CACEH,MAAO,mDACPR,YAAa,uIACbS,KAAM,iWAgBNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,+BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,KAEb,CACEH,MAAO,aACPR,YAAa,uIACbS,KAAM,8WAkBNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,+BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,O","sources":["../../README.md"],"sourcesContent":["import * as component_1 from '@kne/current-lib_react-fetch';\nimport * as component_2 from 'antd';\nimport * as component_3 from 'lodash';\nconst readmeConfig = {\n    name: `react-fetch`,\n    summary: `<ul>\n<li>\n<p>该组件处理了数据请求的逻辑，在数据请求返回之前会渲染一个loading组件，在请求数据返回之后渲染业务组件</p>\n</li>\n<li>\n<p>在url，data，options其中之一发生改变的时候，组件会自动发出一个新的请求去请求数据</p>\n</li>\n<li>\n<p>底层采用 <a href=\"https://github.com/axios/axios\">axios</a> 易于扩展</p>\n</li>\n<li>\n<p>插件式设计，方便追踪每一步的调用堆栈信息，易于扩展</p>\n</li>\n<li>\n<p>用preset预制设置，全局生效，不用在每次调用都设置一些通用属性</p>\n</li>\n</ul>`,\n    description: `用于获取数据的react组件`,\n    packageName: `@kne/react-fetch`,\n    api: `<h4>Fetch</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>需要请求接口的url</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>data</td>\n<td>POST请求的data</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>params</td>\n<td>GET请求的query</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>options</td>\n<td>请求的其他参数，如method,headers等，详细请参考<a href=\"https://github.com/axios/axios\">axios</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>loading</td>\n<td>在请求发出后没有返回结果时渲染的组件</td>\n<td>jsx</td>\n<td>null</td>\n</tr>\n<tr>\n<td>error</td>\n<td>请求返回后code不为200时渲染的组件，如果传入函数，参数中会接收到请求返回的错误msg</td>\n<td>jsx|function</td>\n<td>null</td>\n</tr>\n<tr>\n<td>empty</td>\n<td>请求未发出时渲染的组件</td>\n<td>jsx</td>\n<td>null</td>\n</tr>\n<tr>\n<td>isEmpty</td>\n<td>判断响应数据是否是空状态</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>auto</td>\n<td>是否自动发送请求，如果为false需要手动调用refresh方法才会发送请求，并且url,data,options发生变化后不会自动发送新的请求</td>\n<td>bool</td>\n<td>true</td>\n</tr>\n<tr>\n<td>component</td>\n<td>请求返回成功时需要渲染的组件</td>\n<td>jsx</td>\n<td>-</td>\n</tr>\n<tr>\n<td>render</td>\n<td>请求返回成功时执行的方法，改方法需要返回jsx，参数可以拿到{data,refresh,setData}，当存在component时改方法不会被执行</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>loader</td>\n<td>当该参数存在时，组件会优先执行loader去获取数据，而不会用ajax去发送请求，注意其请求的返回结果页不会transformResponse转换，也不会通过结果的code去判断请求是否成功，如果loader返回的Promise为resolve就判定为请求成功。其返回数据也会原样传给组件的data不会再data.results取值</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ajax</td>\n<td>通常情况下你不需要传入这个参数,该参数默认取preset中的ajax。当你需要一个完全不同于全局的ajax发送请求的时候可以通过该参数为此组件设置一个新的ajax对象</td>\n<td>axios object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>transformResponse</td>\n<td>通常情况下你不需要传入这个参数,该参数默认取preset中的transformResponse。当你需要一个完全不同于全局的响应数据转换器的时候可以通过该参数为此组件设置</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>transformData</td>\n<td>转换data返回值函数，它在拿到transformResponse返回结果之后执行</td>\n<td>function</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>withFetch</h4>\n<p>高阶组件 Fetch组件的封装 withFetch(WrappedComponent) WrappedComponent为一个React Component,等价于给Fetch传入component参数</p>\n<h4>createWithFetch</h4>\n<p>withFetch的高阶函数，可以将部分参数提前传入，不必在调用withFetch(WrappedComponent) 时再传入参数</p>\n<h4>useFetch</h4>\n<p>React Hooks</p>\n<p>参数 useFetch(options)</p>\n<p>options:</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>需要请求接口的url</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>data</td>\n<td>POST请求的data</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>params</td>\n<td>GET请求的query</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>options</td>\n<td>请求的其他参数，如method,headers等，详细请参考<a href=\"https://github.com/axios/axios\">axios</a></td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>urlParams</td>\n<td>url模板参数,当url为 /example/{id}且传入urlParams为{id:123},真正发出请求的url为: /example/123</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ignoreSuccessState</td>\n<td>当且仅当该参数为true时在output阶段不再判断返回数据的code===200为请求成功，且返回data不再取results而是返回data本身</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>auto</td>\n<td>是否自动发送请求，如果为false需要手动调用refresh方法才会发送请求，并且url,data,options发生变化后不会自动发送新的请求</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>debug</td>\n<td>是否开启调试，开启以后可以在控制台打印整个组件的plugin执行堆栈，可以帮助排查问题</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>onRequestStart</td>\n<td>请求开始时回调方法</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onRequestError</td>\n<td>请求发生错误时回调方法</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onRequestSuccess</td>\n<td>请求成功时回调方法</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onRequestComplete</td>\n<td>请求完成时（包括成功和失败）的回调方法</td>\n<td>function</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>返回值</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>isLoading</td>\n<td>当前fetch组件是否正在加载</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>isComplete</td>\n<td>当前fetch组件是否已完成</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>error</td>\n<td>当前组件的请求错误信息</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>data</td>\n<td>当前组件的请求返回数据</td>\n<td>-</td>\n</tr>\n<tr>\n<td>refresh</td>\n<td>可以调用它手动重新发送请求的方法</td>\n<td>function</td>\n</tr>\n<tr>\n<td>reload</td>\n<td>可以调用它手动重新发送请求的方法和refresh的差异在于，reload在请求响应返回之前不会写在掉当前页面，当请求响应返回后对内层组件做数据更新操作，refresh则会在请求发送后切换到loading状态，请求响应返回后内层组件走重新install操作</td>\n<td>func</td>\n</tr>\n<tr>\n<td>setData</td>\n<td>可以调用它给fetch中保存值的state赋值</td>\n<td>function</td>\n</tr>\n<tr>\n<td>requestParams</td>\n<td>当前请求的实际参数</td>\n<td>object</td>\n</tr>\n<tr>\n<td>fetchProps</td>\n<td>Fetch组件接受到的请求参数,它和requestParams的区别在于，只有当Fetch的参数发生修改fetchProps的值会修改，通过send，reload,refresh修改请求参数，fetchProps的值不会修改，requestParams却始终时实际发送请求的参数</td>\n<td>object</td>\n</tr>\n</tbody>\n</table>\n<h4>preset 预制设置的方法 preset(options)</h4>\n<p>options</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ajax</td>\n<td>axios实例</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>loading</td>\n<td>在请求发出后没有返回结果时渲染的组件</td>\n<td>jsx</td>\n<td>null</td>\n</tr>\n<tr>\n<td>error</td>\n<td>请求返回后code不为200时渲染的组件，如果传入函数，参数中会接收到请求返回的错误msg</td>\n<td>jsx|function</td>\n<td>null</td>\n</tr>\n<tr>\n<td>empty</td>\n<td>请求未发出时渲染的组件</td>\n<td>jsx</td>\n<td>null</td>\n</tr>\n<tr>\n<td>transformResponse</td>\n<td>请求转换器，参数为response返回值为response需要在此方法将请求返回结果转换成规定的格式</td>\n<td>function</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>缓存接口的应用</h4>\n<p>Fetch options</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cache</td>\n<td>为true或者为字符串的时候为开启缓存，如果请求参数完全一致则命中缓存。如果cache为字符串，只有cahce一致的组件之间会命中缓存</td>\n<td>boolean|string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ttl</td>\n<td>缓存失效时间，为0的时候不失效，单位为毫秒</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>isLocal</td>\n<td>缓存是否存储到localStorge</td>\n<td>bool</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3>request</h3>\n<p>导出一个行为，参数和Fetch一致的方法，调用后发送一个ajax请求</p>\n<p>使用方法</p>\n<pre><code class=\"language-js\">request(props)\n</code></pre>`,\n    example: {\n        isFull: false,\n        className: `react_fetch_6e9ee`,\n        style: `.react_fetch_6e9ee .ant-space-vertical {\n  width: 100%;\n}\n.react_fetch_6e9ee .load-container {\n  height: 300px;\n  overflow: auto;\n}\n.react_fetch_6e9ee .scroller-no-more {\n  text-align: center;\n}`,\n        list: [{\n    title: `preset设置`,\n    description: `注意：react-fetch 内部处理请求的时候只通过 code,msg,results来作为内部逻辑，code为200判定为请求成功，不为200时判定为错误，msg会传入到error组件，拿到results后，会将results作为业务组件的data属性\n如果后端的返回不满足上诉格式，需要在preset的transformResponse方法做转换适配\najax为一个axios实例，每个实例的拦截器可能不同，默认会在内部自动创建一个axios实例，但是没有任何拦截器，如果想给其添加拦截器，可以自行创建axios实例通过preset设置\npreset 可以单独放一个文件里，在入口文件顶部引入。\npreset全局设置一次即可。`,\n    code: `const {preset} = ReactFetch;\nconst {Input,Spin,Empty,Result,Space} = antd;\n\nlet timeout = 1000;\n\npreset({\n    ajax: (config) => {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                if (config.url === '/data1') {\n                    console.log('data1 request');\n                    resolve({\n                        data: {\n                            code: 0,\n                            data: [\n                                {title: '数据一'},\n                                {title: '数据二'}\n                            ]\n                        }\n                    });\n                    return;\n                }\n                if (config.url === '/data3') {\n                    console.log('data1 request');\n                    resolve({\n                        data: [\n                            {title: '数据一'},\n                            {title: '数据二'}\n                        ]\n                    });\n                    return;\n                }\n                if (config.url === '/data2') {\n                    resolve({\n                        data: {\n                            code: 0,\n                            data: {\n                                list: _.range(0, config.params.size || 10).map((index) => {\n                                    return {\n                                        title: config.params.page + '页，数据' + (index + 1)\n                                    }\n                                }),\n                                total: 100\n                            }\n                        }\n                    });\n                    return;\n                }\n                return resolve({\n                    data: {\n                        code: 404,\n                        msg: '没找到资源'\n                    }\n                });\n            }, timeout);\n        });\n    },\n    loading: <Spin>数据加载中...</Spin>,\n    empty: <Empty/>,\n    error: (msg) => <Result title={msg}/>,\n    transformResponse: (response) => {\n        const {data} = response;\n        response.data = {\n            code: data.code === 0 ? 200 : data.code, msg: data.msg, results: data.data\n        };\n        return response;\n    }\n});\n\nconst Preset = () => {\n    return <Space direction=\"vertical\">\n        <div>该组件只设置其他示例的mock data，不展示任何功能</div>\n        <div>这里可以设置模拟请求延迟时间</div>\n        <Input type=\"text\" defaultValue={timeout} onChange={(e) => {\n            timeout = parseInt(e.target.value);\n        }} addonAfter=\"ms\"/>\n    </Space>\n};\n\nrender(<Preset/>);\n\n`,\n    scope: [{\n    name: \"ReactFetch\",\n    packageName: \"@kne/current-lib_react-fetch\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"_\",\n    packageName: \"lodash\",\n    component: component_3\n}]\n},{\n    title: `请求成功`,\n    description: `发送一个成功请求，内部组件拿到数据并展示数据`,\n    code: `const {createWithFetch} = ReactFetch;\nconst {List} = antd;\n\nconst Remote = createWithFetch({\n    url: '/data1'\n})(({data}) => {\n    return <List bordered>\n        {data.map((item, index) => {\n            return <List.Item key={index}>{item.title}</List.Item>\n        })}\n    </List>;\n});\n\nrender(<Remote/>);\n\n`,\n    scope: [{\n    name: \"ReactFetch\",\n    packageName: \"@kne/current-lib_react-fetch\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `使用Fetch组件发送请求`,\n    description: `使用Fetch组件发送一个成功请求，内部组件拿到数据并展示数据`,\n    code: `const {default: Fetch} = ReactFetch;\nconst {List} = AntdList;\n\nconst Remote = () => {\n    return <Fetch url=\"/data1\" loader={() => {\n        return new Promise((resolve) => {\n            resolve([{title:'loader数据'}]);\n        })\n    }} render={({data}) => {\n        return <List bordered>\n            {data.map((item, index) => {\n                return <List.Item key={index}>{item.title}</List.Item>\n            })}\n        </List>\n    }}/>\n};\n\nrender(<Remote/>);\n\n`,\n    scope: [{\n    name: \"ReactFetch\",\n    packageName: \"@kne/current-lib_react-fetch\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `请求失败`,\n    description: `发送一个失败请求，内部组件不渲染，直接展示错误信息`,\n    code: `const {createWithFetch} = ReactFetch;\n\nconst Error = createWithFetch({\n    url: '/error'\n})(() => {\n    return '这是一个错误请求';\n});\n\nrender(<Error/>);\n\n`,\n    scope: [{\n    name: \"ReactFetch\",\n    packageName: \"@kne/current-lib_react-fetch\",\n    component: component_1\n}]\n},{\n    title: `分页数据请求`,\n    description: `分页加载数据`,\n    code: `const {useState} = React;\nconst {createWithFetch} = ReactFetch;\nconst {Button,Pagination,Space,List} = antd;\n\nconst Page = createWithFetch({\n    url: '/data2',\n    params: {page: 1, size: 10}\n})(({data, requestParams, isRefresh, reload, refresh}) => {\n    return <Space direction=\"vertical\">\n        <List bordered>\n            {data.list.map((item, index) => {\n                return <List.Item key={index}>{item.title}</List.Item>\n            })}\n        </List>\n        <div>\n            <Pagination current={requestParams.params.page} total={data.total}\n                        pageSize={requestParams.params.size} onChange={(page, size) => {\n                (isRefresh ? refresh : reload)({params: {page, size}});\n            }}/>\n        </div>\n    </Space>;\n});\n\nconst Remote = () => {\n    const [isRefresh, setIsRefresh] = useState(false);\n    return <Space direction=\"vertical\">\n        <div>\n            <Button type=\"primary\" onClick={() => {\n                setIsRefresh((value) => !value);\n            }}>以{isRefresh ? 'refresh' : 'reload'}方式加载\n            </Button>\n        </div>\n        <Page isRefresh={isRefresh}/>\n    </Space>\n};\n\nrender(<Remote/>);\n\n`,\n    scope: [{\n    name: \"ReactFetch\",\n    packageName: \"@kne/current-lib_react-fetch\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"_\",\n    packageName: \"lodash\",\n    component: component_3\n}]\n},{\n    title: `下拉加载更多`,\n    description: `下拉加载更多数据`,\n    code: `const {useEffect, forwardRef, useRef, useImperativeHandle} = React;\nconst {createWithFetch} = ReactFetch;\nconst {Space,List,Spin} = antd;\nconst {throttle} = _;\n\nconst ScrollLoader = forwardRef(({\n                                     className,\n                                     noMore,\n                                     getScrollContainer,\n                                     onLoader,\n                                     isLoading,\n                                     completeTips,\n                                     children\n                                 }, ref) => {\n    const scrollerRef = useRef();\n    const onLoaderHandlerRef = useRef(onLoader);\n    onLoaderHandlerRef.current = onLoader;\n    const canLoadRef = useRef(!noMore && !isLoading);\n    canLoadRef.current = !noMore && !isLoading;\n    useImperativeHandle(ref, () => {\n        return scrollerRef.current;\n    }, []);\n    useEffect(() => {\n        if (canLoadRef.current && scrollerRef.current.clientHeight === scrollerRef.current.scrollHeight) {\n            onLoaderHandlerRef.current();\n        }\n    }, [isLoading]);\n    useEffect(() => {\n        const el = scrollerRef.current;\n        const scrollHandler = throttle((e) => {\n            const el = e.target;\n            if (canLoadRef.current && el.clientHeight + el.scrollTop + 20 > el.scrollHeight) {\n                onLoaderHandlerRef.current();\n            }\n        }, 100);\n        el.addEventListener('scroll', scrollHandler, true);\n        return () => {\n            el.removeEventListener('scroll', scrollHandler, true);\n        };\n    }, []);\n    return <div ref={scrollerRef} className=\"load-container\">\n        <Space direction='vertical'>\n            <div>{children}</div>\n            {isLoading ? <div className='scroller-no-more'><Spin/></div> : null}\n            {noMore ? <div className='scroller-no-more'>{completeTips}</div> : null}\n        </Space>\n    </div>;\n});\n\nconst Remote = createWithFetch({\n    url: '/data2',\n    params: {page: 1, size: 10}\n})(({data, isComplete, requestParams, loadMore}) => {\n    return <ScrollLoader isLoading={!isComplete}\n                         noMore={isComplete && requestParams.params.page >= Math.ceil(data.total / requestParams.params.size)}\n                         onLoader={() => {\n                             return loadMore({\n                                 params: {page: requestParams.params.page + 1}\n                             }, (data, newData) => {\n                                 return Object.assign({}, newData, {\n                                     list: data.list.concat(newData.list)\n                                 });\n                             });\n                         }} completeTips=\"加载完成\">\n        <List bordered>\n            {data.list.map((item, index) => {\n                return <List.Item key={index}>{item.title}</List.Item>\n            })}\n        </List>\n    </ScrollLoader>;\n});\n\n\nrender(<Remote/>);\n\n`,\n    scope: [{\n    name: \"ReactFetch\",\n    packageName: \"@kne/current-lib_react-fetch\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"_\",\n    packageName: \"lodash\",\n    component: component_3\n}]\n},{\n    title: `空数据`,\n    description: `用isEmpty判断数据是不是空状态`,\n    code: `const {createWithFetch} = ReactFetch;\nconst {List} = antd;\n\nconst Remote = createWithFetch({\n    url: '/data1',\n    isEmpty: () => true\n})(({data}) => {\n    return <List bordered>\n        {data.map((item, index) => {\n            return <List.Item key={index}>{item.title}</List.Item>\n        })}\n    </List>;\n});\n\nrender(<Remote/>);\n\n`,\n    scope: [{\n    name: \"ReactFetch\",\n    packageName: \"@kne/current-lib_react-fetch\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `用loader加载数据`,\n    description: `展示了用loader来加载数据的例子`,\n    code: `const {createWithFetch} = ReactFetch;\n\n\nconst Example = createWithFetch({\n    loader: async (data) => {\n        return await new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve(Object.assign({}, data, {message: '请求成功'}));\n            }, 1000);\n        });\n    }\n})(({data,requestParams}) => {\n    console.log(requestParams);\n    return JSON.stringify(data, null, 2);\n});\n\nrender(<Example data={{name: 'jack'}}/>);\n\n`,\n    scope: [{\n    name: \"ReactFetch\",\n    packageName: \"@kne/current-lib_react-fetch\",\n    component: component_1\n}]\n},{\n    title: `transform`,\n    description: `展示transformResponse的调用`,\n    code: `const {createWithFetch} = ReactFetch;\nconst {List} = antd;\n\nconst Remote = createWithFetch({\n    url: '/data1',\n    transformResponse: (response) => {\n        console.log(response);\n        return {\n            data:{\n                code: 200, results: [\n                    {title: '我是response被拦截以后的内容'}\n                ]\n            }\n        };\n    }\n})(({data}) => {\n    return <List bordered>\n        {data.map((item, index) => {\n            return <List.Item key={index}>{item.title}</List.Item>\n        })}\n    </List>;\n});\n\nrender(<Remote/>);\n\n`,\n    scope: [{\n    name: \"ReactFetch\",\n    packageName: \"@kne/current-lib_react-fetch\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `缓存操作`,\n    description: `展示缓存操作`,\n    code: `const {createWithFetch, getCache} = ReactFetch;\nconst {List,Space,Button} = antd;\n\nconst {useRef} = React;\n\nconst Remote = createWithFetch({\n    url: '/data1',\n    cache: 'cache'\n})(({data}) => {\n    return <List bordered>\n        {data.map((item, index) => {\n            return <List.Item key={index}>{item.title}</List.Item>\n        })}\n    </List>;\n});\n\nconst cache = getCache();\n\nconst Example = () => {\n    const ref = useRef();\n    return <Space direction=\"vertical\">\n        <Remote ref={ref}/>\n        <Space>\n            <Button onClick={() => {\n                ref.current.reload({}, false);\n            }}>获取数据</Button>\n            <Button onClick={() => {\n                cache.delByCacheName('cache');\n            }}>清除缓存</Button>\n        </Space>\n    </Space>;\n};\n\nrender(<Example/>);\n\n`,\n    scope: [{\n    name: \"ReactFetch\",\n    packageName: \"@kne/current-lib_react-fetch\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `忽略请求成功状态`,\n    description: `发送一个成功请求，内部组件拿到数据并展示数据`,\n    code: `const {createWithFetch} = ReactFetch;\nconst {List} = antd;\n\nconst Remote = createWithFetch({\n    url: '/data3', ignoreSuccessState: true\n})(({data}) => {\n    return <List bordered>\n        {data.map((item, index) => {\n            return <List.Item key={index}>{item.title}</List.Item>\n        })}\n    </List>;\n});\n\nrender(<Remote/>);\n\n`,\n    scope: [{\n    name: \"ReactFetch\",\n    packageName: \"@kne/current-lib_react-fetch\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `url params`,\n    description: `发送一个成功请求，内部组件拿到数据并展示数据`,\n    code: `const {createWithFetch} = ReactFetch;\nconst {List} = antd;\n\nconst Remote = createWithFetch({\n    url: '/data{id}', urlParams: {\n        id: 1\n    }\n})(({data}) => {\n    return <List bordered>\n        {data.map((item, index) => {\n            return <List.Item key={index}>{item.title}</List.Item>\n        })}\n    </List>;\n});\n\nrender(<Remote/>);\n\n`,\n    scope: [{\n    name: \"ReactFetch\",\n    packageName: \"@kne/current-lib_react-fetch\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n}]\n    }\n};\nexport default readmeConfig;\n"],"names":["name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","component"],"sourceRoot":""}